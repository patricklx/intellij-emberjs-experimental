"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findConfig = exports.loadConfig = exports.ConfigLoader = void 0;
const silent_error_1 = __importDefault(require("silent-error"));
const loader_1 = require("./loader");
var loader_2 = require("./loader");
Object.defineProperty(exports, "ConfigLoader", { enumerable: true, get: function () { return loader_2.ConfigLoader; } });
/**
 * Loads glint configuration, starting from the given directory
 * and searching upwards and raising an error if no configuration
 * is found.
 */
function loadConfig(from) {
    let config = findConfig(from);
    if (!config) {
        throw new silent_error_1.default(`Unable to find Glint configuration for ${from}`);
    }
    return config;
}
exports.loadConfig = loadConfig;
/**
 * Loads glint configuration, starting from the given directory
 * and searching upwards. Returns `null` if no configuration is
 * found.
 */
function findConfig(from) {
    return new loader_1.ConfigLoader().configForDirectory(from);
}
exports.findConfig = findConfig;
//# sourceMappingURL=index.js.map