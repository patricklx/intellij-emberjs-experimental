"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindLanguageServerPool = exports.capabilities = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const messages_1 = require("./messages");
exports.capabilities = {
    textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Full,
    completionProvider: {
        resolveProvider: true,
    },
    referencesProvider: true,
    hoverProvider: true,
    definitionProvider: true,
    workspaceSymbolProvider: true,
    renameProvider: {
        prepareProvider: true,
    },
};
function bindLanguageServerPool({ connection, pool, openDocuments }) {
    connection.onInitialize(() => ({ capabilities: exports.capabilities }));
    openDocuments.onDidOpen(({ document }) => {
        pool.withServerForURI(document.uri, ({ server, scheduleDiagnostics }) => {
            server.openFile(document.uri, document.getText());
            scheduleDiagnostics();
        });
    });
    openDocuments.onDidClose(({ document }) => {
        pool.withServerForURI(document.uri, ({ server }) => {
            server.closeFile(document.uri);
        });
    });
    openDocuments.onDidChangeContent(({ document }) => {
        pool.withServerForURI(document.uri, ({ server, scheduleDiagnostics }) => {
            server.updateFile(document.uri, document.getText());
            scheduleDiagnostics();
        });
    });
    connection.onPrepareRename(({ textDocument, position }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.prepareRename(textDocument.uri, position));
    });
    connection.onRenameRequest(({ textDocument, position, newName }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.getEditsForRename(textDocument.uri, position, newName));
    });
    connection.onCompletion(({ textDocument, position }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.getCompletions(textDocument.uri, position));
    });
    connection.onCompletionResolve((item) => {
        var _a;
        // SAFETY: We should only ever get completion resolution requests for items we ourselves produced
        let glintItem = item;
        return ((_a = pool.withServerForURI(glintItem.data.uri, ({ server }) => server.getCompletionDetails(glintItem))) !== null && _a !== void 0 ? _a : item);
    });
    connection.onHover(({ textDocument, position }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.getHover(textDocument.uri, position));
    });
    connection.onDefinition(({ textDocument, position }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.getDefinition(textDocument.uri, position));
    });
    connection.onReferences(({ textDocument, position }) => {
        return pool.withServerForURI(textDocument.uri, ({ server }) => server.getReferences(textDocument.uri, position));
    });
    connection.onWorkspaceSymbol(({ query }) => {
        let symbols = [];
        pool.forEachServer(({ server }) => {
            symbols.push(...server.findSymbols(query));
        });
        return symbols;
    });
    connection.onRequest(messages_1.GetIRRequest.type, ({ uri }) => {
        return pool.withServerForURI(uri, ({ server }) => server.getTransformedContents(uri));
    });
    connection.onDidChangeWatchedFiles(({ changes }) => {
        pool.forEachServer(({ server, scheduleDiagnostics }) => {
            for (let change of changes) {
                if (change.type === vscode_languageserver_1.FileChangeType.Created) {
                    server.watchedFileWasAdded(change.uri);
                }
                else if (change.type === vscode_languageserver_1.FileChangeType.Deleted) {
                    server.watchedFileWasRemoved(change.uri);
                }
                else {
                    server.watchedFileDidChange(change.uri);
                }
            }
            scheduleDiagnostics();
        });
    });
}
exports.bindLanguageServerPool = bindLanguageServerPool;
//# sourceMappingURL=binding.js.map