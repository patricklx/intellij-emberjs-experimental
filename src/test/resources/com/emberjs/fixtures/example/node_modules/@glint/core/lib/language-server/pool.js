"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTsconfig = exports.LanguageServerPool = void 0;
const config_1 = require("@glint/config");
const vscode_languageserver_1 = require("vscode-languageserver");
const document_cache_1 = __importDefault(require("../common/document-cache"));
const scheduling_1 = require("../common/scheduling");
const transform_manager_1 = __importDefault(require("../common/transform-manager"));
const glint_language_server_1 = __importDefault(require("./glint-language-server"));
const util_1 = require("./util");
class LanguageServerPool {
    constructor(connection, openDocuments) {
        this.connection = connection;
        this.openDocuments = openDocuments;
        this.servers = new Map();
        this.configLoader = new config_1.ConfigLoader();
    }
    forEachServer(callback) {
        for (let details of this.servers.values()) {
            this.runWithCapturedErrors(callback, details);
        }
    }
    withServerForURI(uri, callback) {
        let details = this.getServerDetailsForURI(uri);
        if (details) {
            return this.runWithCapturedErrors(callback, details);
        }
    }
    runWithCapturedErrors(callback, details) {
        try {
            return callback(details);
        }
        catch (error) {
            this.connection.console.error(errorMessage(error));
        }
    }
    configForURI(uri) {
        return this.configLoader.configForFile((0, util_1.uriToFilePath)(uri));
    }
    getServerDetailsForURI(uri) {
        try {
            let config = this.configForURI(uri);
            if (!config)
                return;
            let details = this.servers.get(config);
            if (!details) {
                details = this.launchServer(config);
                this.servers.set(config, details);
            }
            return details;
        }
        catch (error) {
            this.sendMessage(vscode_languageserver_1.MessageType.Error, `Unable to start Glint language service for ${(0, util_1.uriToFilePath)(uri)}.\n${errorMessage(error)}`);
        }
    }
    launchServer(glintConfig) {
        let documentCache = new document_cache_1.default(glintConfig);
        let transformManager = new transform_manager_1.default(glintConfig, documentCache);
        let tsconfig = parseTsconfig(glintConfig, transformManager);
        let rootDir = glintConfig.rootDir;
        let server = new glint_language_server_1.default(glintConfig, documentCache, transformManager, tsconfig);
        let scheduleDiagnostics = this.buildDiagnosticScheduler(server, glintConfig);
        return { server, rootDir, scheduleDiagnostics };
    }
    buildDiagnosticScheduler(server, glintConfig) {
        return (0, scheduling_1.debounce)(250, () => {
            let documentsForServer = this.openDocuments
                .all()
                .filter((doc) => this.configForURI(doc.uri) === glintConfig);
            for (let { uri } of documentsForServer) {
                try {
                    const diagnostics = server.getDiagnostics(uri);
                    this.connection.sendDiagnostics({ uri, diagnostics });
                }
                catch (error) {
                    this.connection.sendDiagnostics({
                        uri,
                        diagnostics: [
                            {
                                range: { start: { line: 0, character: 0 }, end: { line: 0, character: 1 } },
                                message: 'Glint encountered an error computing diagnostics for this file. ' +
                                    'This is likely a bug in Glint; please file an issue, including any ' +
                                    'code and/or steps to follow to reproduce the error.\n\n' +
                                    errorMessage(error),
                            },
                        ],
                    });
                    this.connection.console.error(`Error getting diagnostics for ${uri}.\n${errorMessage(error)}`);
                }
            }
        });
    }
    sendMessage(type, message) {
        this.connection.sendNotification(vscode_languageserver_1.ShowMessageNotification.type, { message, type });
    }
}
exports.LanguageServerPool = LanguageServerPool;
function parseTsconfig(glintConfig, transformManager) {
    let { ts } = glintConfig;
    let contents = ts.readConfigFile(glintConfig.configPath, ts.sys.readFile).config;
    let host = { ...ts.sys, readDirectory: transformManager.readDirectory };
    return ts.parseJsonConfigFileContent(contents, host, glintConfig.rootDir, undefined, glintConfig.configPath);
}
exports.parseTsconfig = parseTsconfig;
function errorMessage(error) {
    return (error instanceof Error && error.stack) || `${error}`;
}
//# sourceMappingURL=pool.js.map