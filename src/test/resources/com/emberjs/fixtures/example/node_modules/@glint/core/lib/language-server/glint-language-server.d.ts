import { GlintConfig } from '@glint/config';
import TransformManager from '../common/transform-manager';
import type ts from 'typescript';
import { Hover, Location, CompletionItem, Diagnostic, WorkspaceEdit, Range, SymbolInformation } from 'vscode-languageserver';
import DocumentCache from '../common/document-cache';
import { Position } from './util/position';
export interface GlintCompletionItem extends CompletionItem {
    data: {
        uri: string;
        transformedFileName: string;
        transformedOffset: number;
        source: string | undefined;
    };
}
export default class GlintLanguageServer {
    private glintConfig;
    private documents;
    private transformManager;
    private service;
    private openFileNames;
    private rootFileNames;
    private ts;
    constructor(glintConfig: GlintConfig, documents: DocumentCache, transformManager: TransformManager, parsedConfig: ts.ParsedCommandLine);
    dispose(): void;
    openFile(uri: string, contents: string): void;
    updateFile(uri: string, contents: string): void;
    closeFile(uri: string): void;
    watchedFileWasAdded(uri: string): void;
    watchedFileDidChange(uri: string): void;
    watchedFileWasRemoved(uri: string): void;
    getDiagnostics(uri: string): Array<Diagnostic>;
    findSymbols(query: string): Array<SymbolInformation>;
    getCompletions(uri: string, position: Position): GlintCompletionItem[] | undefined;
    getCompletionDetails(item: GlintCompletionItem): GlintCompletionItem;
    prepareRename(uri: string, position: Position): Range | undefined;
    getEditsForRename(uri: string, position: Position, newText: string): WorkspaceEdit;
    getHover(uri: string, position: Position): Hover | undefined;
    getDefinition(uri: string, position: Position): Location[];
    getReferences(uri: string, position: Position): Location[];
    getTransformedContents(uri: string): string | null;
    private calculateOriginalLocations;
    private textSpanToLocation;
    private findDiagnosticsSource;
    private getTransformedOffset;
    private isTemplate;
    private allKnownFileNames;
}
